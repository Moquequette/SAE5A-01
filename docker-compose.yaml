version: '3.8'

services:
  # Service Node.js avec Express pour le backend
  backend:
    image: node:18
    container_name: backend-container
    working_dir: /app/backend
    volumes:
      - ./backend:/app/backend  # Monte le répertoire local ./backend dans le conteneur à /app/backend
    ports:
      - "3000:3000"  # Fait correspondre le port local 3000 au port du conteneur 3000
    environment:
      MONGO_URI: mongodb://mongodb-container:27017  # Définis l'URL de connexion à MongoDB
    command: bash -c "npm install && npm start"  # Commande à exécuter lors du démarrage du conteneur
    depends_on:
      - mongodb  
    networks:
      - my-network  # Utilise le réseau défini sous le nom my-network

  # Service MongoDB
  mongodb:
    image: mongo:4.4
    container_name: mongodb-container
    ports:
      - "27017:27017"  # Fait correspondre le port local 27017 au port du conteneur 27017
    volumes:
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js  # Monte un script d'initialisation MongoDB
    networks:
      - my-network  # Utilise le réseau défini sous le nom my-network

  # Service Node.js avec Express pour le frontend
  frontend:
    image: node:18
    container_name: frontend-container
    working_dir: /app/frontend
    volumes:
      - ./frontend:/app/frontend  # Monte le répertoire local ./frontend dans le conteneur à /app/frontend
    ports:
      - "80:8080"  # Fait correspondre le port local 80 au port du conteneur 8080
    environment:
      - VUE_APP_CORS=true
    command: bash -c "npm install axios && npm install && npm run serve"  # Commande à exécuter lors du démarrage du conteneur
    networks:
      - my-network  # Utilise le réseau défini sous le nom my-network

networks:
  my-network:
    driver: bridge  # Utilise le pilote de réseau bridge pour créer un réseau interne aux conteneurs